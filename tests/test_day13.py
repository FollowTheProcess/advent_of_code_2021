from src.day13.day13 import Fold, Paper, Point

RAW = """6,10
0,14
9,10
0,3
10,4
4,11
6,0
6,12
4,1
0,13
10,12
3,4
3,0
8,4
1,10
2,14
8,10
9,0

fold along y=7
fold along x=5"""

PAPER = Paper(
    array=[
        [".", ".", ".", "#", ".", ".", "#", ".", ".", "#", "."],
        [".", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
        ["#", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", "#", ".", ".", ".", ".", "#", ".", "#"],
        [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", "#", ".", ".", ".", ".", "#", ".", "#", "#", "."],
        [".", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", "#", ".", ".", ".", "#"],
        ["#", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
        ["#", ".", "#", ".", ".", ".", ".", ".", ".", ".", "."],
    ]
)


def test_paper_parse():
    p = Paper.parse_points(RAW)

    assert p == PAPER

    # Assert every mentioned point above is a "#"
    points = [Point.parse(n) for n in RAW.strip().split("\n\n")[0].splitlines()]
    for point in points:
        assert p.array[point.row][point.col] == "#"


def test_parse_fold_instructions():
    instructions = Paper.parse_fold_instructions(RAW)

    assert instructions == [Fold("y", 7), Fold("x", 5)]


def test_get_row():
    assert PAPER.get_row(0) == [".", ".", ".", "#", ".", ".", "#", ".", ".", "#", "."]
    assert PAPER.get_row(1) == [".", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."]
    assert PAPER.get_row(7) == [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."]
    assert PAPER.get_row(14) == ["#", ".", "#", ".", ".", ".", ".", ".", ".", ".", "."]


def test_get_col():
    assert PAPER.get_col(0) == [
        ".",
        ".",
        ".",
        "#",
        ".",
        ".",
        ".",
        ".",
        ".",
        ".",
        ".",
        ".",
        ".",
        "#",
        "#",
    ]
    assert PAPER.get_col(10) == [
        ".",
        ".",
        ".",
        ".",
        "#",
        ".",
        ".",
        ".",
        ".",
        ".",
        ".",
        ".",
        "#",
        ".",
        ".",
    ]


def test_get():
    assert PAPER.get(Point(0, 0)) == "."
    assert PAPER.get(Point(3, 0)) == "#"
    assert PAPER.get(Point(4, 3)) == "#"


def test_move_dot():
    paper = Paper(
        array=[
            [".", ".", ".", "#", ".", ".", "#", ".", ".", "#", "."],
            [".", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            ["#", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", "#", ".", ".", ".", ".", "#", ".", "#"],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", "#", ".", ".", ".", ".", "#", ".", "#", "#", "."],
            [".", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", "#", ".", ".", ".", "#"],
            ["#", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            ["#", ".", "#", ".", ".", ".", ".", ".", ".", ".", "."],
        ]
    )

    want = Paper(
        array=[
            ["#", ".", ".", "#", ".", ".", "#", ".", ".", "#", "."],  # It's now here
            [".", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            ["#", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", "#", ".", ".", ".", ".", "#", ".", "#"],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", "#", ".", "#", "#", "."],  # This is now a .
            [".", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", "#", ".", ".", ".", "#"],
            ["#", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            ["#", ".", "#", ".", ".", ".", ".", ".", ".", ".", "."],
        ]
    )

    paper.move(frm=Point(10, 1), to=Point(0, 0))
    assert paper == want


def test_fold_y():
    paper = Paper(
        array=[
            [".", ".", ".", "#", ".", ".", "#", ".", ".", "#", "."],
            [".", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            ["#", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", "#", ".", ".", ".", ".", "#", ".", "#"],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", "#", ".", ".", ".", ".", "#", ".", "#", "#", "."],
            [".", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", "#", ".", ".", ".", "#"],
            ["#", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            ["#", ".", "#", ".", ".", ".", ".", ".", ".", ".", "."],
        ]
    )

    want = Paper(
        array=[
            ["#", ".", "#", "#", ".", ".", "#", ".", ".", "#", "."],
            ["#", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", "#", ".", ".", ".", "#"],
            ["#", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."],
            [".", "#", ".", "#", ".", ".", "#", ".", "#", "#", "#"],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
        ]
    )

    paper.fold(Fold("y", 7))

    assert paper == want


def test_fold_x():
    paper = Paper(
        array=[
            ["#", ".", "#", "#", ".", ".", "#", ".", ".", "#", "."],
            ["#", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", "#", ".", ".", ".", "#"],
            ["#", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."],
            [".", "#", ".", "#", ".", ".", "#", ".", "#", "#", "#"],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
        ]
    )

    want = Paper(
        array=[
            ["#", "#", "#", "#", "#"],
            ["#", ".", ".", ".", "#"],
            ["#", ".", ".", ".", "#"],
            ["#", ".", ".", ".", "#"],
            ["#", "#", "#", "#", "#"],
            [".", ".", ".", ".", "."],
            [".", ".", ".", ".", "."],
        ]
    )

    paper.fold(Fold("x", 5))

    assert paper == want


def test_count_dots():
    paper = Paper(
        array=[
            ["#", ".", "#", "#", ".", ".", "#", ".", ".", "#", "."],
            ["#", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", "#", ".", ".", ".", "#"],
            ["#", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."],
            [".", "#", ".", "#", ".", ".", "#", ".", "#", "#", "#"],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
        ]
    )

    assert paper.count_dots() == 17
